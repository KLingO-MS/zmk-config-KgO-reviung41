/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE    0
#define _SYM     1
#define _NAV     2

// &led_strip { chain-length = <7>; };

/ {
    macros {
        // to_BASE: to_BASE {
        //     label = "ZM_to_BASE";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(15,30,3)>
        //         , <&to _BASE>
        //         ;
        // };

        // to_NAV: to_NAV {
        //     label = "ZM_to_NAV";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(200,100,3)>
        //         , <&to _NAV>
        //         ;
        // };

        // mo_NAV: mo_NAV {
        //     label = "ZM_mo_NAV";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_COLOR_HSB(200,100,3)>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,30,3)>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        // mo_SYM: mo_SYM {
        //     label = "ZM_mo_SYM";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_COLOR_HSB(100,80,3)>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,30,3)>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_BOOT: to_BOOT {
        //     label = "ZM_to_BOOT";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(0,100,100)>
        //         , <&rgb_ug RGB_ON>
        //         , <&bootloader>
        //         ;
        // };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <4 5 6 7>;
            bindings = <&rch A A>;
        };

        // combo_RGB_TOG {
        //     timeout-ms = <50>;
        //     key-positions = <17 18>;
        //     bindings = <&rgb_ug RGB_TOG>;
        // };

        // combo_RGB_EFF {
        //     timeout-ms = <50>;
        //     key-positions = <29 30>;
        //     bindings = <&rgb_ug RGB_EFF>;
        // };

        combo_PRTSCRN {
            timeout-ms = <50>;
            key-positions = <11 35>;
            bindings = <&kp PSCRN>;
        };

        combo_LPAR {
            timeout-ms = <30>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <30>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <30>;
            key-positions = <3 4>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <30>;
            key-positions = <27 28>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <30>;
            key-positions = <31 32>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        combo_LT {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&kp LT>;
            layers = <_BASE _SYM>;
        };

        combo_GT {
            timeout-ms = <30>;
            key-positions = <32 33>;
            bindings = <&kp GT>;
            layers = <_BASE _SYM>;
        };
    };
};

/ {
    behaviors {
        nav_td: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NAVI";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo _NAV>, <&to _NAV>;
        };
 
        bspctap: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_TAP_SHIFT_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
         // global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        spctap: space-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_TAP_MO_SYM_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
         // global-quick-tap;
            bindings = <&mo _SYM>, <&kp>;
        };

        rch: reset-combo-hold {
            compatible = "zmk,behavior-hold-tap";
            label = "RESET_COMBO_HOLD";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <2500>;
            bindings = <&bootloader>, <&sys_reset>;
        };

        com_sem: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };

        dot_col: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };

        qmk_exc: qmark_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QMARK_EXCL";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT)>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
// ColemaSK
// ------------------------------------------------------------------------------
// | ESC  |  Q  |  F  |  V  |  P  |  B  |   |  K  |  L  |  U  |  Y  |  J  | DEL |
// | GUI  |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  | TAB |
// | CTRL |  '  |  Z  |  C  |  D  |  W  |   |  X  |  H  | , ; | . : |  "  | INS |
//        | (LOCK)_NAV | SHIFT(BKSPC) | ENTER | _SYM(SPC) | ALT |
                        bindings = <
   &kp ESC   &kp Q   &kp F &kp V &kp P &kp B       &kp K &kp L &kp U    &kp Y    &kp J   &kp DEL 
   &kp LGUI  &kp A   &kp R &kp S &kp T &kp G       &kp M &kp N &kp E    &kp I    &kp O   &kp TAB 
   &kp LCTRL &kp SQT &kp Z &kp C &kp D &kp W       &kp X &kp H &com_sem &dot_col &kp DQT &kp INS 
                 &nav_td &bspctap LSHIFT BSPC &kp ENTER &spctap X SPACE &kp LALT
                        >;
                };

//                 base_layer {
// // ENGRAM SK
// // ------------------------------------------------------------------------------
// // | ESC  |  B  |  Y  |  O  |  U  |  X  |   |  Q  |  L  |  D  |  W  |  V  | DEL |
// // | GUI  |  C  |  I  |  E  |  A  | , ; |   | . : |  H  |  T  |  S  |  N  | TAB |
// // | CTRL |  G  |  Z  |  J  |  K  | ? ! |   | ' " |  R  |  M  |  F  |  P  | INS |
// //        | (LOCK)_NAV | SHIFT(BKSPC) | ENTER | _SYM(SPC) | ALT |
//                         bindings = <
//    &kp ESC   &kp B &kp Y &kp O &kp U &kp X       &kp Q    &kp L &kp D &kp W &kp V &kp DEL 
//    &kp LGUI  &kp C &kp I &kp E &kp A &com_sem    &dot_col &kp H &kp T &kp S &kp N &kp TAB 
//    &kp LCTRL &kp G &kp Z &kp J &kp K &qmk_exc    &kp SQT  &kp R &kp M &kp F &kp P &kp INS 
//                  &nav_td &bspctap LSHIFT BSPC &kp ENTER &spctap X SPACE &kp LALT
//                         >;
//                 };

                sym_layer {
// -----------------------------------------------------------------------------
// |  ˇ  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  ˇ  |
// |  ˇ  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  ˇ  |
// |  ˇ  |  \  |  ?  |  _  |  -  |  `  |   |  ~  |  +  |  =  |  |  |  /  |  ˇ  |
//                        | SPC |  ˇ  |  ˇ  |     |  ˇ  |
                        bindings = <
   &trans &kp EXCL &kp AT    &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR &trans
   &trans &kp N1   &kp N2    &kp N3    &kp N4    &kp N5          &kp N6    &kp N7    &kp N8    &kp N9    &kp N0   &trans
   &trans &kp BSLH &kp QMARK &kp UNDER &kp MINUS &kp GRAVE       &kp TILDE &kp PLUS  &kp EQUAL &kp PIPE  &kp FSLH &trans
                                         &kp SPACE &trans &trans &trans &trans
                        >;
                };

                nav_layer {
// ---------------------------------------------------------------------------------
// |  ˇ  |  F1 |  F2 |  F3 |  F4 |  F5 |   | F11 | HOME |  UP  | END  | PGUP |  ˇ  |
// |  ˇ  |  F6 |  F7 |  F8 |  F9 | F10 |   | F12 | LEFT | DOWN | RGHT | PGDN |  ˇ  |
// |  ˇ  |     |     |     |     |     |   |     | VOL- | MUTE | VOL+ |      |  ˇ  |
//                        | _BASE |  ˇ  |  ˇ  | SPC |  ˇ  |
                        bindings = <
   &trans &kp F1  &kp F2  &kp F3  &kp F4  &kp F5        &kp F11      &kp HOME     &kp UP       &kp END      &kp PG_UP  &trans
   &trans &kp F6  &kp F7  &kp F8  &kp F9  &kp F10       &kp F12      &kp LEFT     &kp DOWN     &kp RIGHT    &kp PG_DN  &trans
   &trans &none   &none   &none   &none   &none         &none        &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &none      &trans
                                 &to_BASE &trans &trans &kp SPACE &trans
                        >;
                };


        };
};
