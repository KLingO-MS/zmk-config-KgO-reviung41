/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE    0
#define _SYM     1
#define _NAV     2

// &led_strip { chain-length = <1>; };

/ {
    macros {
        to_BASE: to_BASE {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&to _BASE>
                ;
        };

        to_NAV: to_NAV {
            label = "ZM_to_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(80,100,3)>
                , <&to _NAV>
                ;
        };

        mo_NAV: mo_NAV {
            label = "ZM_mo_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(80,100,3)>
                , <&macro_press &mo _NAV>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&macro_release &mo _NAV>
                ;
        };

        mo_SYM: mo_SYM {
            label = "ZM_mo_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(10,75,2)>
                , <&macro_press &mo _SYM>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&macro_release &mo _SYM>
                ;
        };

        // mo_FKEYS: mo_FKEYS {
        //     label = "ZM_mo_FKEYS";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,3)>
        //         , <&macro_press &mo _FKEYS>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,2)>
        //         , <&macro_release &mo _FKEYS>
        //         ;
        // };

        // to_NUMPAD: to_NUMPAD {
        //     label = "ZM_to_NUMPAD";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(200,100,3)>
        //         , <&to _NUMPAD>
        //         ;
        // };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,100)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <12 17 18 23>;
            bindings = <&rch A A>;
        };

        combo_LPAR {
            timeout-ms = <30>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RPAR {
            timeout-ms = <30>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LBRC {
            timeout-ms = <30>;
            key-positions = <3 4>;
            bindings = <&kp LBRC>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RBRC {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp RBRC>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LBKT {
            timeout-ms = <30>;
            key-positions = <27 28>;
            bindings = <&kp LBKT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RBKT {
            timeout-ms = <30>;
            key-positions = <31 32>;
            bindings = <&kp RBKT>;
            layers = <_BASE _NUM_SYM>;
        };

        // combo_LT {
        //     timeout-ms = <30>;
        //     key-positions = <13 14>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _NUM_SYM>;
        // };

        // combo_GT {
        //     timeout-ms = <30>;
        //     key-positions = <21 22>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _NUM_SYM>;
        // };
    };
};

&sk {
    quick-release;
};

/ {
    behaviors {
        nav_td: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NAVI";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo_NAV>, <&to_NAV>;
        };
 
        // td1: tap_dance_1 {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "LOCK_NUMPAD";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&mo_FKEYS>, <&to_NUMPAD>;
        // };

        // ctrl_c_v: ctrl_c_v {
        //         compatible = "zmk,behavior-tap-dance";
        //         label = "CTRL_COPY_PASTA";
        //         #binding-cells = <0>;
        //         tapping-term-ms = <400>;
        //         bindings = <&kp LC(C)>, <&kp LC(V)>;
        // };

        // gui_c_v: gui_c_v {
        //         compatible = "zmk,behavior-tap-dance";
        //         label = "GUI_COPY_PASTA";
        //         #binding-cells = <0>;
        //         tapping-term-ms = <400>;
        //         bindings = <&kp LG(C)>, <&kp LG(V)>;
        // };

        // ctrl_x: ctrl_x {
        //         compatible = "zmk,behavior-hold-tap";
        //         label = "CTRL_CUT_HOLD";
        //         #binding-cells = <2>;
        //         flavor = "tap-preferred";
        //         tapping-term-ms = <400>;
        //         bindings = <&kp>, <&ctrl_c_v>;
        // };

        // gui_x: gui_x {
        //         compatible = "zmk,behavior-hold-tap";
        //         label = "GUI_CUT_HOLD";
        //         #binding-cells = <2>;
        //         flavor = "tap-preferred";
        //         tapping-term-ms = <400>;
        //         bindings = <&kp>, <&gui_c_v>;
        // };

        gqt: global-quick-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "GLOBAL_QUICK_TAP";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <100>;
                global-quick-tap;
                bindings = <&kp>, <&kp>;
        };

        spctap: space-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "SPACE_TAP_MO_SYM_HOLD";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <100>;
                global-quick-tap;
                bindings = <&mo_NUM_SYM>, <&kp>;
        };

        rch: reset-combo-hold {
                compatible = "zmk,behavior-hold-tap";
                label = "RESET_COMBO_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <3000>;
                bindings = <&to_BOOT>, <&sys_reset>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
// --------------------------------------------------------------------------------
// | ESC  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L  |  U  |  Y  |  '  |  DEL  |
// | TAB  |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  | ENTER |
// | CTRL |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H  |  ,  |  .  |  /  |  INS  |
//           | GUI | SHIFT(BKSPC) | _NUM_SYM(SPC) | _NAV(LOCK_NAV) | ALT |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp F &kp P &kp B       &kp J &kp L &kp U     &kp Y   &kp SQT  &kp DEL 
   &kp TAB   &kp A &kp R &kp S &kp T &kp G       &kp M &kp N &kp E     &kp I   &kp O    &kp ENTER 
   &kp LCTRL &kp Z &kp X &kp C &kp D &kp V       &kp K &kp H &kp COMMA &kp DOT &kp FSLH &kp INS 
                &kp LGUI &gqt LSHIFT BSPC &spctap X SPACE &nav_td &kp LALT
                        >;
                };

                sym_layer {
// -----------------------------------------------------------------------------
// |  ˇ  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  ˇ  |
// |  ˇ  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  ˇ  |
// |  ˇ  | "|" |  `  |  ~  |  _  |  =  |   |  +  |  -  |  ;  |  :  |  \  |  ˇ  |
//                        |  ˇ  |  ˇ  |  ˇ  |     |  ˇ  |
                        bindings = <
   &trans &kp EXCL &kp AT    &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR &trans
   &trans &kp N1   &kp N2    &kp N3    &kp N4    &kp N5          &kp N6    &kp N7    &kp N8    &kp N9    &kp N0   &trans
   &trans &kp PIPE &kp GRAVE &kp TILDE &kp UNDER &kp EQUAL       &kp PLUS  &kp MINUS &kp SEMI  &kp COLON &kp BSLH &trans
                                          &trans &trans &trans &none &trans
                        >;
                };

                nav_layer {
// -------------------------------------------------------------------------------------------
// |  ˇ  |  F1 |  F2 |  F3 |  F4 |  F5 |   | F11 | HOME |  UP  | END  | PGUP |  ˇ  |
// |  ˇ  |  F6 |  F7 |  F8 |  F9 | F10 |   | F12 | LEFT | DOWN | RGHT | PGDN |  ˇ  |
// |  ˇ  | BT1 | BT2 | BT3 | BT4 | BT5 |   | USB | VOL- | MUTE | VOL+ | BT_C |  ˇ  |
//                        |  ˇ  |  ˇ  | SPC | _BASE |  ˇ  |
                        bindings = <
   &trans &kp F1       &kp F2       &kp F3       &kp F4       &kp F5            &kp F11      &kp HOME     &kp UP       &kp END      &kp PG_UP  &trans
   &trans &kp F6       &kp F7       &kp F8       &kp F9       &kp F10           &kp F12      &kp LEFT     &kp DOWN     &kp RIGHT    &kp PG_DN  &trans
   &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &out OUT_TOG &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &bt BT_CLR &trans
                                                          &trans &trans &kp SPACE &to_BASE &trans
                        >;
                };

                // fkeys_layer {
// -----------------------------------------------------------------------------------
// | ESC | F1 | F2  | F3  | F4  |    |   |    | CALC | c,v,x | c,v,x |      |  DEL   |
// |     | F5 | F6  | F7  | F8  |    |   |    | INS  | sGUI  | sCTRL | sALT | sSHIFT |
// |  Z  | F9 | F10 | F11 | F12 |    |   |    | APP  |  TAB  |       |      |  RET   |
//                   | SPACE | BKSPC |   |       |      |
//                         bindings = <
//    &kp ESC &kp F1 &kp F2  &kp F3  &kp F4  &none      &none &kp C_AL_CALC &gui_x LG(X) X &ctrl_x LC(X) X &none    &kp DEL
//    &none   &kp F5 &kp F6  &kp F7  &kp F8  &none      &none &kp INS       &sk LGUI       &sk LCTRL       &sk LALT &sk LSHIFT
//    &kp Z   &kp F9 &kp F10 &kp F11 &kp F12 &none      &none &kp K_APP     &kp TAB        &none           &none    &kp RET
//                                &kp SPACE &kp BSPC &none &none &none
//                         >;
//                 };

//                 numpad_layer {
// ---------------------------------------------------------------------------------------
// | ESC     | PREV | PLAYP | NEXT | BT CLR  |    |   |    |  /  |  7  |  8  |  9  |  -  |
// | RGB_TOG | VOL- | MUTE  | VOL+ | OUT_TOG |    |   |    |  *  |  4  |  5  |  6  |  +  |
// | BT1     | BT2  | BT3   | BT4  | BT5     |    |   |    |  .  |  1  |  2  |  3  |  0  |
//                                | _BASE | BKSPC |   | ENTER | _BASE |
//                         bindings = <
//    &kp ESC         &kp C_PREV   &kp C_PP     &kp C_NEXT   &bt BT_CLR    &none      &none  &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS
//    &rgb_ug RGB_TOG &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &out OUT_TOG  &none      &none  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS
//    &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &none      &none  &kp KP_DOT       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N0
//                                                         &to_BASE &kp BSPC &none &kp KP_ENTER &to_BASE
//                         >;
//                 };
        };
};
